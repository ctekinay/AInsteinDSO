<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AInstein - AI Architecture Assistant</title>
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ctext y='.9em' font-size='90'%3EðŸ¤–%3C/text%3E%3C/svg%3E">

    <style>
        :root {
            --alliander-green: #6DB33F;
            --alliander-orange: #FF6B35;
            --alliander-dark-green: #5A9A34;
            --bg-primary: #ffffff;
            --bg-secondary: #f8fafc;
            --bg-tertiary: #f1f5f9;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --text-muted: #94a3b8;
            --border-light: #e2e8f0;
            --border-medium: #cbd5e1;
            --primary-blue: #3b82f6;
            --hover-bg: #f8fafc;
            --success-green: #10b981;
            --warning-amber: #f59e0b;
            --error-red: #ef4444;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            background: var(--bg-primary);
            color: var(--text-primary);
            line-height: 1.6;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.7rem 1.4rem;
            border-bottom: 1px solid var(--border-light);
            background: var(--bg-primary);
            max-width: 560px;
            margin: 0 auto;
            width: 100%;
        }

        .logo-section {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .alliander-logo {
            width: 85px;
            height: auto;
            border-radius: 6px;
        }

        .app-title {
            display: flex;
            flex-direction: column;
            gap: 0.15rem;
        }

        .app-name {
            font-size: 1.05rem;
            font-weight: 700;
            color: var(--text-primary);
            margin: 0;
        }

        .app-subtitle {
            font-size: 0.6rem;
            color: var(--text-secondary);
            margin: 0;
        }

        .connection-status {
            display: flex;
            align-items: center;
            gap: 0.35rem;
            padding: 0.35rem 0.7rem;
            background: var(--bg-secondary);
            border-radius: 14px;
            font-size: 0.6rem;
            color: var(--success-green);
        }

        .status-dot {
            width: 6px;
            height: 6px;
            background: var(--success-green);
            border-radius: 50%;
        }

        .status-dot.offline {
            background: var(--error-red);
        }

        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            max-width: 560px;
            margin: 0 auto;
            width: 100%;
            padding: 0 1.4rem;
            padding-bottom: 75px;
            overflow-y: auto;
        }

        .welcome-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            padding: 1.4rem 1rem;
            margin-top: 0.5rem;
            max-height: calc(100vh - 200px);
            overflow-y: auto;
        }

        .welcome-title {
            font-size: 1.4rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
        }

        .welcome-description {
            font-size: 0.7rem;
            color: var(--text-secondary);
            max-width: 420px;
            line-height: 1.4;
            margin-bottom: 1.2rem;
        }

        .sample-questions {
            display: flex;
            flex-direction: column;
            gap: 0.4rem;
            width: 100%;
            max-width: 420px;
            margin-bottom: 0.7rem;
        }

        .question-item {
            background: var(--bg-primary);
            border: 1px solid var(--border-light);
            border-radius: 6px;
            padding: 0.6rem 0.8rem;
            cursor: pointer;
            transition: all 0.2s ease;
            text-align: left;
            font-size: 0.65rem;
            color: var(--text-primary);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        }

        .question-item:hover {
            background: var(--bg-secondary);
            border-color: var(--primary-blue);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .question-complexity {
            font-size: 0.5rem;
            color: var(--text-muted);
            margin-bottom: 0.15rem;
            font-weight: 500;
        }

        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 0.7rem 0;
            display: none;
            margin-bottom: 75px;
        }

        .message-wrapper {
            position: relative;
            display: flex;
            gap: 0.7rem;
            margin-bottom: 1.2rem;
            align-items: flex-start;
            padding-right: 40px;
        }

        .message-wrapper.user {
            flex-direction: row-reverse;
            padding-right: 0;
            padding-left: 40px;
        }

        .message {
            display: flex;
            gap: 0.7rem;
            align-items: flex-start;
            width: 100%;
        }

        .message.user {
            flex-direction: row-reverse;
        }

        .message-avatar {
            width: 25px;
            height: 25px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            flex-shrink: 0;
        }

        .message-avatar svg {
            width: 14px;
            height: 14px;
            fill: currentColor;
        }

        .message.user .message-avatar {
            background: var(--primary-blue);
            color: white;
        }

        .message.assistant .message-avatar {
            background: var(--alliander-green);
            color: white;
        }

        .message-content {
            background: var(--bg-secondary);
            border: 1px solid var(--border-light);
            border-radius: 11px;
            padding: 0.8rem 1rem;
            max-width: calc(100% - 50px);
            font-size: 0.7rem;
            line-height: 1.7;
            white-space: pre-wrap;
            word-wrap: break-word;
            overflow-wrap: break-word;
        }

        .message-content strong {
            font-weight: 600;
            color: var(--text-primary);
        }

        .message-content ul,
        .message-content ol {
            margin: 0.6rem 0;
            padding-left: 1.8rem;
        }

        .message-content li {
            margin: 0.4rem 0;
            line-height: 1.6;
        }

        .message-content hr {
            border: none;
            border-top: 1px solid var(--border-light);
            margin: 1rem 0;
        }

        .message-content code {
            background: rgba(59, 130, 246, 0.1);
            padding: 0.15rem 0.4rem;
            border-radius: 4px;
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 0.65rem;
            color: var(--primary-blue);
        }

        .message-content p {
            margin: 0.6rem 0;
        }

        .message-content p:first-child {
            margin-top: 0;
        }

        .message-content p:last-child {
            margin-bottom: 0;
        }

        .message.user .message-content {
            background: var(--primary-blue);
            color: white;
            border-color: var(--primary-blue);
        }

        .copy-message-btn {
            position: absolute;
            top: 0.7rem;
            right: 0;
            width: 32px;
            height: 32px;
            background: var(--bg-secondary);
            border: 1px solid var(--border-light);
            border-radius: 6px;
            cursor: pointer;
            opacity: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            color: var(--text-secondary);
            font-size: 0.7rem;
            z-index: 10;
            pointer-events: auto;
        }

        .message-wrapper.user .copy-message-btn {
            right: auto;
            left: 0;
        }

        .copy-message-btn:hover {
            background: var(--hover-bg);
            border-color: var(--primary-blue);
            color: var(--primary-blue);
        }

        .copy-message-btn.copied {
            background: rgba(16, 185, 129, 0.1);
            border-color: var(--success-green);
            color: var(--success-green);
        }

        .message-wrapper:hover .copy-message-btn {
            opacity: 1;
        }

        .copy-message-btn svg {
            width: 15px;
            height: 15px;
            fill: currentColor;
        }

        .message-meta {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-top: 0.6rem;
            font-size: 0.55rem;
            color: var(--text-muted);
        }

        .confidence-badge {
            padding: 0.2rem 0.4rem;
            border-radius: 8px;
            font-size: 0.55rem;
            font-weight: 500;
        }

        .confidence-high { background: rgba(16, 185, 129, 0.1); color: var(--success-green); }
        .confidence-medium { background: rgba(245, 158, 11, 0.1); color: var(--warning-amber); }
        .confidence-low { background: rgba(239, 68, 68, 0.1); color: var(--error-red); }

        .citations {
            display: flex;
            flex-wrap: wrap;
            gap: 0.4rem;
            margin-top: 0.4rem;
        }

        .citation {
            background: rgba(59, 130, 246, 0.1);
            color: var(--primary-blue);
            padding: 0.2rem 0.4rem;
            border-radius: 6px;
            font-size: 0.55rem;
            font-family: 'Monaco', 'Consolas', monospace;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .citation:hover {
            background: rgba(59, 130, 246, 0.2);
            transform: translateY(-1px);
        }

        .input-section {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 0.7rem 1.4rem;
            border-top: 1px solid var(--border-light);
            background: var(--bg-primary);
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);
            z-index: 100;
        }

        .input-section .input-container {
            max-width: 560px;
            margin: 0 auto;
        }

        .input-container {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .input-wrapper {
            flex: 1;
            position: relative;
        }

        .message-input {
            width: 100%;
            min-height: 48px;
            max-height: 48px;
            padding: 0.5rem 0.7rem;
            border: 1px solid var(--border-medium);
            border-radius: 8px;
            background: var(--bg-primary);
            color: var(--text-primary);
            font-size: 0.7rem;
            line-height: 1.3;
            resize: none;
            transition: border-color 0.2s ease;
            font-family: inherit;
            overflow-y: auto;
        }

        .message-input:focus {
            outline: none;
            border-color: var(--primary-blue);
        }

        .message-input::placeholder {
            color: var(--text-muted);
        }

        .send-button {
            width: 32px;
            height: 32px;
            background: var(--primary-blue);
            border: none;
            border-radius: 8px;
            color: white;
            cursor: pointer;
            transition: background-color 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            flex-shrink: 0;
        }

        .send-button:hover:not(:disabled) {
            background: #2563eb;
        }

        .send-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .controls {
            display: flex;
            gap: 0.35rem;
            align-items: center;
        }

        .control-btn {
            width: 28px;
            height: 28px;
            border: 1px solid var(--border-medium);
            background: var(--bg-primary);
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            color: var(--text-secondary);
            transition: all 0.2s ease;
        }

        .control-btn svg {
            width: 14px;
            height: 14px;
            fill: currentColor;
        }

        .control-btn:hover {
            background: var(--hover-bg);
            border-color: var(--border-medium);
        }

        .chat-background {
            background: #fafbfc;
        }

        .typing-indicator {
            display: flex;
            gap: 0.15rem;
            padding: 0.7rem;
        }

        .typing-dot {
            width: 6px;
            height: 6px;
            background: var(--text-muted);
            border-radius: 50%;
            animation: typing 1.4s infinite ease-in-out;
        }

        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }

        @keyframes typing {
            0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
            40% { transform: scale(1); opacity: 1; }
        }

        @media (max-width: 768px) {
            .header { padding: 0.7rem; }
            .main-content { padding: 0 0.7rem; }
            .welcome-section { padding: 1.4rem 0.7rem; }
            .message-content { max-width: 85%; }
        }
    </style>
</head>
<body>
    <div style="border-bottom: 1px solid var(--border-light); background: var(--bg-primary);">
        <header class="header">
            <div class="logo-section">
                <img src="/static/alliander_logo.jpeg" alt="Alliander" class="alliander-logo">
                <div class="app-title">
                    <h1 class="app-name">AInstein</h1>
                    <p class="app-subtitle">AI Architecture Assistant</p>
                </div>
            </div>
            <div class="controls">
                <div class="connection-status">
                    <div class="status-dot" id="statusDot"></div>
                    <span id="statusText">Connected</span>
                </div>
                <button class="control-btn" id="exportBtn" title="Export Chat">
                    <svg viewBox="0 0 24 24">
                        <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                    </svg>
                </button>
            </div>
        </header>
    </div>

    <main class="main-content">
        <div class="welcome-section" id="welcomeSection">
            <h2 class="welcome-title">Welcome to AInstein</h2>
            <p class="welcome-description">
                Your AI-powered architecture assistant that streamlines ESA workflows.
                I evaluate initiatives, analyze cross-layer impact, identify stakeholders,
                update ArchiMate models, and generate ADRs to maintain organizational
                alignment and transparency.
            </p>

            <div class="sample-questions">
                <div class="question-item" onclick="fillPrompt('What is an asset in Alliander terms?')">
                    <div class="question-complexity">BASIC</div>
                    What is an asset in Alliander terms?
                </div>
                <div class="question-item" onclick="fillPrompt('What capability should I use for grid congestion management?')">
                    <div class="question-complexity">INTERMEDIATE</div>
                    What capability should I use for grid congestion management?
                </div>
                <div class="question-item" onclick="fillPrompt('How do I model SCADA systems in ArchiMate with proper layer alignment?')">
                    <div class="question-complexity">ADVANCED</div>
                    How do I model SCADA systems in ArchiMate with proper layer alignment?
                </div>
                <div class="question-item" onclick="fillPrompt('Generate a comprehensive ADR for implementing microservices architecture in energy management systems, including cross-layer impact analysis and stakeholder alignment strategies.')">
                    <div class="question-complexity">EXPERT</div>
                    Generate a comprehensive ADR for implementing microservices architecture in energy management systems, including cross-layer impact analysis and stakeholder alignment strategies.
                </div>
            </div>
        </div>

        <div class="messages-container chat-background" id="messagesContainer">
            <div id="messages"></div>
        </div>
    </main>

    <section class="input-section">
        <div class="input-container">
            <div class="input-wrapper">
                <textarea
                    id="messageInput"
                    class="message-input"
                    placeholder="Ask me about ArchiMate models, architectural decisions, or upload a file..."
                    rows="1"
                ></textarea>
            </div>
            <button id="sendButton" class="send-button">âž¤</button>
        </div>
    </section>

    <script>
        let websocket = null;
        let sessionId = 'session_' + Math.random().toString(36).substr(2, 9);
        let isConnected = false;
        let chatStarted = false;

        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const messagesDiv = document.getElementById('messages');
        const statusDot = document.getElementById('statusDot');
        const statusText = document.getElementById('statusText');
        const welcomeSection = document.getElementById('welcomeSection');
        const messagesContainer = document.getElementById('messagesContainer');
        const exportBtn = document.getElementById('exportBtn');

        init();

        function init() {
            sendButton.addEventListener('click', sendMessage);
            messageInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
            exportBtn.addEventListener('click', () => console.log('Export'));
            connectWebSocket();
        }

        function connectWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/ws/${sessionId}`;
            websocket = new WebSocket(wsUrl);

            websocket.onopen = () => {
                isConnected = true;
                statusDot.classList.remove('offline');
                statusText.textContent = 'Connected';
                sendButton.disabled = false;
            };

            websocket.onmessage = (event) => {
                const message = JSON.parse(event.data);
                if (message.type === 'typing') {
                    showTypingIndicator();
                } else {
                    hideTypingIndicator();
                    addMessage(message);
                }
            };

            websocket.onclose = () => {
                isConnected = false;
                statusDot.classList.add('offline');
                statusText.textContent = 'Disconnected';
                sendButton.disabled = true;
                setTimeout(connectWebSocket, 3000);
            };

            websocket.onerror = (error) => {
                console.error('WebSocket error:', error);
            };
        }

        function fillPrompt(text) {
            messageInput.value = text;
            messageInput.focus();
        }

        function startChat() {
            if (!chatStarted) {
                chatStarted = true;
                welcomeSection.style.display = 'none';
                messagesContainer.style.display = 'block';
            }
        }

        function sendMessage() {
            const message = messageInput.value.trim();
            if (!message || !isConnected) return;

            startChat();
            addMessage({
                type: 'user',
                content: message,
                timestamp: new Date().toISOString()
            });

            websocket.send(JSON.stringify({
                message: message,
                session_id: sessionId
            }));

            messageInput.value = '';
        }

        function parseMarkdownFormatting(text) {
            text = text.replace(/</g, '&lt;').replace(/>/g, '&gt;');
            text = text.replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>');
            text = text.replace(/^---$/gm, '<hr>');
            text = text.replace(/^[â€¢\*]\s+(.+)$/gm, '<li>$1</li>');
            text = text.replace(/(<li>.*?<\/li>\n?)+/g, match => '<ul>' + match + '</ul>');
            text = text.replace(/\[([a-z]+:[^\]]+)\]/gi, '<code>[$1]</code>');
            text = text.replace(/\n\n/g, '</p><p>');
            text = text.replace(/\n/g, '<br>');
            return '<p>' + text + '</p>';
        }

        function addMessage(message) {
            const messageWrapper = document.createElement('div');
            messageWrapper.className = `message-wrapper ${message.type}`;

            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${message.type}`;

            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.innerHTML = message.type === 'user' 
                ? '<svg viewBox="0 0 24 24"><path d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z"/></svg>'
                : '<svg viewBox="0 0 24 24"><path d="M12,2A2,2 0 0,1 14,4C14,4.74 13.6,5.39 13,5.73V7A1,1 0 0,0 14,8H16A1,1 0 0,1 17,9V16A1,1 0 0,1 16,17H8A1,1 0 0,1 7,16V9A1,1 0 0,1 8,8H10A1,1 0 0,0 11,7V5.73C10.4,5.39 10,4.74 10,4A2,2 0 0,1 12,2M8.5,11A0.5,0.5 0 0,0 8,11.5A0.5,0.5 0 0,0 8.5,12A0.5,0.5 0 0,0 9,11.5A0.5,0.5 0 0,0 8.5,11M15.5,11A0.5,0.5 0 0,0 15,11.5A0.5,0.5 0 0,0 15.5,12A0.5,0.5 0 0,0 16,11.5A0.5,0.5 0 0,0 15.5,11M12,14C11.5,14 11,14.2 11,15C11,15.8 11.5,16 12,16C12.5,16 13,15.8 13,15C13,14.2 12.5,14 12,14Z"/></svg>';

            const content = document.createElement('div');
            content.className = 'message-content';

            if (message.type === 'assistant') {
                content.innerHTML = parseMarkdownFormatting(message.content);
            } else {
                content.textContent = message.content;
            }

            if (message.type === 'assistant' && (message.confidence || message.citations)) {
                const meta = document.createElement('div');
                meta.className = 'message-meta';

                if (message.confidence) {
                    const confidence = document.createElement('span');
                    const confValue = Math.round(message.confidence * 100);
                    confidence.className = `confidence-badge confidence-${confValue >= 75 ? 'high' : confValue >= 50 ? 'medium' : 'low'}`;
                    confidence.textContent = `${confValue}% confidence`;
                    meta.appendChild(confidence);
                }

                if (message.citations && message.citations.length > 0) {
                    const citations = document.createElement('div');
                    citations.className = 'citations';
                    message.citations.forEach(citation => {
                        const citationSpan = document.createElement('span');
                        citationSpan.className = 'citation';
                        citationSpan.textContent = citation;
                        citationSpan.title = `Click to copy: ${citation}`;
                        citationSpan.onclick = () => {
                            navigator.clipboard.writeText(citation);
                            citationSpan.style.background = 'rgba(16, 185, 129, 0.2)';
                            setTimeout(() => citationSpan.style.background = '', 300);
                        };
                        citations.appendChild(citationSpan);
                    });
                    meta.appendChild(citations);
                }

                content.appendChild(meta);
            }

            messageDiv.appendChild(avatar);
            messageDiv.appendChild(content);

            const copyBtn = document.createElement('button');
            copyBtn.className = 'copy-message-btn';
            copyBtn.title = 'Copy message';
            copyBtn.innerHTML = '<svg viewBox="0 0 24 24"><path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/></svg>';
            
            copyBtn.onclick = () => {
                navigator.clipboard.writeText(message.content).then(() => {
                    copyBtn.classList.add('copied');
                    copyBtn.innerHTML = '<svg viewBox="0 0 24 24"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/></svg>';
                    setTimeout(() => {
                        copyBtn.classList.remove('copied');
                        copyBtn.innerHTML = '<svg viewBox="0 0 24 24"><path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/></svg>';
                    }, 1500);
                });
            };

            messageWrapper.appendChild(messageDiv);
            messageWrapper.appendChild(copyBtn);
            messagesDiv.appendChild(messageWrapper);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        function showTypingIndicator() {
            hideTypingIndicator();
            const typingDiv = document.createElement('div');
            typingDiv.className = 'message assistant';
            typingDiv.id = 'typingIndicator';

            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.innerHTML = '<svg viewBox="0 0 24 24"><path d="M12,2A2,2 0 0,1 14,4C14,4.74 13.6,5.39 13,5.73V7A1,1 0 0,0 14,8H16A1,1 0 0,1 17,9V16A1,1 0 0,1 16,17H8A1,1 0 0,1 7,16V9A1,1 0 0,1 8,8H10A1,1 0 0,0 11,7V5.73C10.4,5.39 10,4.74 10,4A2,2 0 0,1 12,2M8.5,11A0.5,0.5 0 0,0 8,11.5A0.5,0.5 0 0,0 8.5,12A0.5,0.5 0 0,0 9,11.5A0.5,0.5 0 0,0 8.5,11M15.5,11A0.5,0.5 0 0,0 15,11.5A0.5,0.5 0 0,0 15.5,12A0.5,0.5 0 0,0 16,11.5A0.5,0.5 0 0,0 15.5,11M12,14C11.5,14 11,14.2 11,15C11,15.8 11.5,16 12,16C12.5,16 13,15.8 13,15C13,14.2 12.5,14 12,14Z"/></svg>';

            const content = document.createElement('div');
            content.className = 'message-content';
            const indicator = document.createElement('div');
            indicator.className = 'typing-indicator';
            indicator.innerHTML = '<div class="typing-dot"></div><div class="typing-dot"></div><div class="typing-dot"></div>';

            content.appendChild(indicator);
            typingDiv.appendChild(avatar);
            typingDiv.appendChild(content);
            messagesDiv.appendChild(typingDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        function hideTypingIndicator() {
            const existing = document.getElementById('typingIndicator');
            if (existing) existing.remove();
        }
    </script>
</body>
</html>